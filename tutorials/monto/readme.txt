
-- Silver and Monto --

This tutorial guides you through building Monto 'servers' with Silver. If you are not familiar with the Monto DDE, you can read about and download the latest version of Monto here: https://bitbucket.org/inkytonik/monto/overview. You should familiarize yourself with the general architecture of a Monto environment as well as the format of JSON messages sent between Monto components.

Included in the tutorial is a language for evaluating simple mathematical expressions. The language is defined in the abstractsyntax, concretesyntax, and driver directories. Generally, the files in these directories should not be modified.


-- Interfacing with Monto in Silver --

Note: Before continuing, you should have Monto installed on your machine.

Change directories into artifacts, and open the Main.sv file. There are two functions of interest here, main and evaluate. Then main function is the entry point for our Silver program. It instantiates a MontoServer with the create function, passing in an evaluate function and the connection strings for our running instance of Monto. The evaluate function given to create must accept a MontoMessage and return a MontoProduct. The first connection string is the hostname and port through which we want to receive messages from Monto, and the second connection string is the hostname and port through which we will send products to Monto.

We have also defined a function called evaluate in the Main.sv file. This function is passed to the server and is what the server uses to create products out of messages. The server expects this function to accept a single MontoMessage as a parameter and return a MontoProduct. To extract the source, language, contents, and selections from a MontoMessage, we can use the getSource, getLanguage, getContents, and getSelections functions respectively. These functions are defined in lib:monto. The evaluate function uses the components extracted from the MontoMessage, along with the driverEval function defined in monto:driver, to create and return a MontoProduct.


-- Running Monto and a Front-End --

Because only Monto servers can be built with Silver, a simple front-end for Monto has been implemented in Java. The front-end acts as both a Monto source and a Monto sink. There are two versions, one which uses a command line interface, in monto-frontend-cli, and another which has its own GUI, in monto-frontend-gui. Both are Java applications build with ANT, so to build you must have the Java SDK installed. To build either of the front-ends, enter the directory of the front-end you wish to build and run ant. A runnable jar file should be generated in the dist directory. Before running a front-end, you should already have Monto running, along with the tutorial server, i.e. the jar generated by compiling the Silver grammar.

-- Summary of lib:monto --

create
MontoServer ::= evalFunction::(MontoProduct ::= MontoMessage) inputConnection::string outputConnection::string

run
Integer ::= server::MontoServer io::IO

createMessage
MontoMessage ::= source::String language::String contents::String selections::String

getSource
String ::= m::MontoMessage

getLanguage
String ::= m::MontoMessage

getContents
String ::= m::MontoMessage

getSelections
String ::= m::MontoMessage

createProduct
MontoProduct ::= source::String product::String language::String contents::String

